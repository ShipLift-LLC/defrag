# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Build & Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CONTAINER_LOCATION: 'us-central1-docker.pkg.dev'
  PROJECT_ID: 'website-328316'
  CONTAINER_REPOSITORY: 'website'
  PROJECT_NAME: 'defrag'

jobs:
  test-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
        node-version: [16.x]

    steps:
    # - name: Test Build Using Node.js ${{ matrix.node-version }}
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
      
      
    - name: Install dependencies
      run: npm ci
    - name: Running build
      run: npm run build --if-present

  build-container:
    needs: test-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure env
        run: | 
          export IMAGE_NAME=$(if [ $GITHUB_REF_NAME == "main" ]; then echo "latest"; else echo ${GITHUB_REF_NAME}; fi;);
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
      - name: Build Docker Container
        env:
          GOOGLE_CLOUD_SERVICE_ACCOUNT_BASE64: ${{ secrets.GOOGLE_CLOUD_SERVICE_ACCOUNT_BASE64 }}
        run: |
          echo "$GOOGLE_CLOUD_SERVICE_ACCOUNT_BASE64" | base64 -d | docker login -u _json_key --password-stdin https://$CONTAINER_LOCATION
          docker pull $CONTAINER_LOCATION/$PROJECT_ID/$CONTAINER_REPOSITORY/$PROJECT_NAME:${{ env.IMAGE_NAME }} || true
          docker build --build-arg SERVER_NAME=defrag -t "$CONTAINER_LOCATION/$PROJECT_ID/$CONTAINER_REPOSITORY/$PROJECT_NAME:${{ env.IMAGE_NAME }}" .
          docker push $CONTAINER_LOCATION/$PROJECT_ID/$CONTAINER_REPOSITORY/$PROJECT_NAME:${{ env.IMAGE_NAME }}

  deploy-to-prod:
    needs: build-container
    runs-on: ubuntu-latest
    container: google/cloud-sdk:latest
    steps:
      - name: Deploy to Prod
        env:
          GOOGLE_CLOUD_SERVICE_ACCOUNT_BASE64: ${{ secrets.GOOGLE_CLOUD_SERVICE_ACCOUNT_BASE64 }}
          REGION: 'us-central1'
          SERVICE_ACCOUNT_USER: 'gitlab@website-328316.iam.gserviceaccount.com'
        run: |
          echo "$GOOGLE_CLOUD_SERVICE_ACCOUNT_BASE64" | base64 -d > auth.json
          gcloud auth activate-service-account $SERVICE_ACCOUNT_USER --key-file=auth.json --project=$PROJECT_ID
          rm auth.json
          gcloud config set run/region $REGION
          gcloud config set run/platform managed

          gcloud run deploy $PROJECT_NAME --image $CONTAINER_LOCATION/$PROJECT_ID/$CONTAINER_REPOSITORY/$PROJECT_NAME
          gcloud run services update-traffic $PROJECT_NAME --to-latest
